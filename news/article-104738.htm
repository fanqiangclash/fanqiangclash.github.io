<!doctype html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://fanqiangclash.github.io/news/article-104738.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>springboot的依赖管理和自动配置</title>
        <meta name="description" content="依赖管理 根据springboot官方文档建立一个springboot项目 我们导入父工程 &lt;parent&gt;&lt;groupId&gt;org.springframework.boot&" />
        <link rel="icon" href="/assets/website/img/subscribeclashnode/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="翻墙Clash 机场订阅中文站">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://fanqiangclash.github.io/news/article-104738.htm" />
    <meta property="og:site_name" content="翻墙Clash 机场订阅中文站" />
    <meta property="og:title" content="springboot的依赖管理和自动配置" />
    <meta property="og:image" content="https://fanqiangclash.github.io/uploads/20240607/f3ecca75f342e8e6e9a9cd4e0de5c278.webp" />
        <meta property="og:release_date" content="2025-04-26T07:39:45" />
    <meta property="og:updated_time" content="2025-04-26T07:39:45" />
        <meta property="og:description" content="依赖管理 根据springboot官方文档建立一个springboot项目 我们导入父工程 &lt;parent&gt;&lt;groupId&gt;org.springframework.boot&" />
        
    <!-- CSS FILES -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>

    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="springboot的依赖管理和自动配置">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    
    <link href="https://fonts.googleapis.com/css2?family=DM+Sans:wght@400;500;700&display=swap" rel="stylesheet">
    <link href="/assets/website/css/subscribeclashnode/bootstrap.min.css" rel="stylesheet">
    <link href="/assets/website/css/subscribeclashnode/bootstrap-icons.css" rel="stylesheet">
    <link href="/assets/website/css/subscribeclashnode/magnific-popup.css" rel="stylesheet">
    <link href="/assets/website/css/subscribeclashnode/tooplate-waso-strategy.css" rel="stylesheet">
    <link rel="stylesheet" href="/assets/website/css/G.css" />
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-KHN10G3F8B"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-KHN10G3F8B');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body class="projects-detail-page" id="section_1" data-page="detail">
        <nav class="navbar navbar-expand-lg bg-white shadow-lg">
        <div class="container">
            <a href="/" class="xcblog-blog-logo">
                        <span>翻墙Clash</span>
                        </a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav ms-auto">
                                        <li class="nav-item">
                        <a class="nav-link" href="/">首页</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/free-nodes/">免费节点</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/paid-subscribe/">推荐机场</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/news/">新闻资讯</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/client.htm">客户端</a>
                    </li>
                                    </ul>
            </div>
        </div>
    </nav>
    <main>
        <section class="hero section-hero section-padding">
            <div class="container">
                <div class="row">
                    <div class="col-12 text-center mx-auto">
                        <div class="section-hero-text">
                            <h1 class="text-white">springboot的依赖管理和自动配置</h1>
                            <small class="small-title text-warning">
                                <a href="/" class="text-warning">首页</a> / <a href="/news/" class="text-warning">新闻资讯</a> / <span>正文</span>
                            </small>
                        </div>
                    </div>
                </div>
            </div>
        </section>
        <section class="about section-padding" id="section_2">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                                        <input type="hidden" id="share-website-info" data-name="Clash Meta免费节点订阅站" data-url="https://clash-meta.github.io">
                <div class="xcblog-blog-detail xcblog-blog-detail-defined">
                      				  				  				<div id="content_views" class="markdown_views prism-tomorrow-night"> <h2>依赖管理</h2> <p>根据springboot官方文档建立一个springboot项目<br /> 我们导入父工程</p> <pre><code class="prism language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.5.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span></code></pre> <p>然后再导入对应的web场景的starter</p> <pre><code class="prism language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span></code></pre> <p>我们就可以使用web场景的一些常见的依赖。<br /> 我们进入当前项目的父工程里发现里面还继承了<strong>spring-boot-dependencies</strong>。里面定义了所有场景对应的依赖及其版本号。<br /> 我们如果在导入依赖的时候，若是springboot的父项目里已经定义了我们需要导入的依赖，我们可以不需要定义version，springboot会自动帮我们导入默认的版本号，这称为<strong>版本仲裁</strong>。<br /> 那么如果我们需要自定义版本号又该如何定义呢？<br /> 例如导入mysql.connector</p> <pre><code class="prism language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre> <p>springboot会自动仲裁版本为8.0.26<br /> 如需要自定义版本，则再自己的maven工程里加入</p> <pre><code class="prism language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mysql.version</span><span class="token punctuation">&gt;</span></span>5.1.47<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mysql.version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span></code></pre> <p>这样就会将版本改为5.1.47。<br /> 首先，我们需要查看spring-boot-dependencies里规定的依赖版本，找到其用的key，在当前项目里重写配置就行。在maven里遵循就近优先原则。<br /><strong>关于场景启动器</strong>，springboot的start命名规范spring-boot-starter-*， * 代表了各种对应的开发场景。<br /> springboot所有支持的场景点击此处进行查看 。<br /> 也有许多第三方会去做springboot的场景启动器 *-spring-boot-starter。<br /> 如果你需要的依赖不在springboot的场景启动器提供的依赖里，则需要手动添加依赖并声明version。</p> <h2>自动配置</h2> <p>在我们导入场景启动器后，会有大量的依赖导入到工程里。例如，我们导入web场景的启动器。写一个简单的Controller，启动springboot项目</p> <pre><code class="prism language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span><span class="token keyword">class</span><span class="token class-name">HelloController</span><span class="token punctuation">{<!-- --></span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span><span class="token keyword">public</span><span class="token class-name">String</span><span class="token function">handle01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token string">"Hello SpringBoot"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p>我们可以看见，可以的访问我们的请求路径。<br /><img decoding="async" src="http://img.555519.xyz/uploads/20221201/39bf92638d01bd056e36f0bd95f74ecb.jpg" alt="springboot的依赖管理和自动配置"></p> <p>就例如spring-boot-starter-web里有webmvc，在以往学习mvc时会需要有一堆的配置，例如dispatcherServlet，乱码的配置，文件上传，视图解析器等等。那么虽然依赖导入了，<strong>但是配置我们却还没有配置</strong>，应用程序也能正常工作。<br /> 我们可以在springboot的主程序入口查看对应的IOC容器。</p> <pre><code class="prism language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span><span class="token keyword">class</span><span class="token class-name">MainApplication</span><span class="token punctuation">{<!-- --></span><span class="token keyword">public</span><span class="token keyword">static</span><span class="token keyword">void</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">// 1.返回IOC容器</span><span class="token class-name">ConfigurableApplicationContext</span> run<span class="token operator">=</span><span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">MainApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2.查看容器里的组件</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> names<span class="token operator">=</span> run<span class="token punctuation">.</span><span class="token function">getBeanDefinitionNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token operator">:</span> names<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p>在启动项目的时候，会罗列出IOC容器里的组件名称 （组件过多，就不一一罗列）<br /><img decoding="async" src="http://img.555519.xyz/uploads/20221201/96d1fe091da17cfd9e858cbc782d0891.jpg" alt="springboot的依赖管理和自动配置"><br /> 在学习Spring时，会有包扫描的配置，可是我们在springboot里并没有配置，让springboot去扫描哪些包下的组件，那又是如何进容器的？<br /> springboot会自动扫描主程序所在的包及其子包，都会被扫描进容器。<br /> 若是你的组件不按照springboot的默认规则来进行存放，但也想进行容器里有以下两种方式</p> <pre><code class="prism language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token punctuation">(</span>scanBasePackages<span class="token operator">=</span><span class="token string">"com"</span><span class="token punctuation">)</span></code></pre> <p>或者</p> <pre><code class="prism language-java"><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages<span class="token operator">=</span><span class="token string">"com"</span><span class="token punctuation">)</span></code></pre> <p>在springboot项目里我们可以通过properties或者yaml文件来配置项目的一些属性，那么这些属性值又是如何生效的呢？<br /> 其实在配置文件里的值，他都是绑定到对应容器里的组件，就例如server.port</p> <pre><code class="prism language-java">server<span class="token punctuation">.</span>port<span class="token operator">=</span><span class="token number">8080</span></code></pre> <p>ctrl+左，我们进入可以发现它对应的绑定了ServerProperties这个类</p> <pre><code class="prism language-java"><span class="token keyword">public</span><span class="token keyword">void</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> port<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">this</span><span class="token punctuation">.</span>port<span class="token operator">=</span> port<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> <p>而这个类在springboot启动的时候会被扫描进容器里<br /><img decoding="async" src="http://img.555519.xyz/uploads/20221201/c010df8377c953dcd27fc82c03dd1b63.jpg" alt="springboot的依赖管理和自动配置"><br /> 这样我们的配置文件就会生效。<br /><strong>按需加载所有自动配置项</strong><br /> spring-boot-dependencies，里有非常多的依赖版本，我们不可能是全部导入到项目中来，按需加载就是按照你导入的场景，会自动导入对应场景的依赖，例如你导入web场景，他就不会给你导入数据场景的依赖。<br /> 关于自动配置，Springboot的自动配置都在spring-boot-autoConfigure里，你导入哪些场景，对应的配置就会生效。<br /><img decoding="async" src="http://img.555519.xyz/uploads/20221201/07f7a5e3662081e10660bc85dc94fde6.jpg" alt="springboot的依赖管理和自动配置"><br /> 例如我们进入batch下查看对应的类，会发现，它有许多类是爆红的<br /><img decoding="async" src="http://img.555519.xyz/uploads/20221201/a98a62af068bf31a5f1dd929df47c1e4.jpg" alt="springboot的依赖管理和自动配置"><br /> 这是因为我们没有导入对应的batch的starter，我们尝试去导入对应的batch的starter</p> <pre><code class="prism language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-batch<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre> <p>再来查看刚刚的类<br /><img decoding="async" src="http://img.555519.xyz/uploads/20221201/8255f192b256966f83b3b34a369d9208.jpg" alt="springboot的依赖管理和自动配置"><br /> 对应的类就不再爆红。<br /> 关于自动配置，Springboot的自动配置都在spring-boot-autoConfigure里，你导入哪些场景，对应的配置就会生效。</p> </div> 			                </div>
                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-104737.htm">6.0 vue3 watch监听函数（reactive篇）</a></p>
                                        <p>下一个：<a href="/news/article-105326.htm">宠爱国际动物医疗中心地址（宠爱国际动物医院地址）</a></p>
                                    </div>
                                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-102696.htm" title="常用的动物疫苗（常用的动物疫苗佐剂有哪些）">常用的动物疫苗（常用的动物疫苗佐剂有哪些）</a></li>
                        <li class="py-2"><a href="/news/article-103857.htm" title="Java 树形结构数据生成导出excel文件">Java 树形结构数据生成导出excel文件</a></li>
                        <li class="py-2"><a href="/news/article-104737.htm" title="6.0 vue3 watch监听函数（reactive篇）">6.0 vue3 watch监听函数（reactive篇）</a></li>
                        <li class="py-2"><a href="/news/article-103160.htm" title="windows 使用pyenv-win 管理多python 版本">windows 使用pyenv-win 管理多python 版本</a></li>
                        <li class="py-2"><a href="/news/article-103163.htm" title="狗粮颗粒机成型原理视频教学（狗粮颗粒机多少钱一台）">狗粮颗粒机成型原理视频教学（狗粮颗粒机多少钱一台）</a></li>
                        <li class="py-2"><a href="/news/article-105326.htm" title="宠爱国际动物医疗中心地址（宠爱国际动物医院地址）">宠爱国际动物医疗中心地址（宠爱国际动物医院地址）</a></li>
                        <li class="py-2"><a href="/news/article-104738.htm" title="springboot的依赖管理和自动配置">springboot的依赖管理和自动配置</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-4-26-free-v2ray.htm" title="「4月26日」最高速度20.2M/S，2025年SSR/Clash/Shadowrocket/V2ray每天更新免费节点订阅链接">「4月26日」最高速度20.2M/S，2025年SSR/Clash/Shadowrocket/V2ray每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-4-24-free-node-subscribe-links.htm" title="「4月24日」最高速度21.7M/S，2025年V2ray/SSR/Clash/Shadowrocket每天更新免费节点订阅链接">「4月24日」最高速度21.7M/S，2025年V2ray/SSR/Clash/Shadowrocket每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-4-25-free-node-subscribe.htm" title="「4月25日」最高速度18.6M/S，2025年V2ray/SSR/Clash/Shadowrocket每天更新免费节点订阅链接">「4月25日」最高速度18.6M/S，2025年V2ray/SSR/Clash/Shadowrocket每天更新免费节点订阅链接</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">14</span> <a href="/date/2025-04/" title="2025-04 归档">2025-04</a></h4>
            </li>
                    </ul>
    </div>
</div>



                    </div>
                </div>
            </div>
        </section>
    </main>
        <footer class="site-footer">
        <div class="container">
            <div class="row">
                <div class="col-lg-6 col-12">
                    <p class="copyright-text mb-0 me-4">
                                            <p>
                                                <a href="/">首页</a> |
                                                <a href="/free-nodes/">免费节点</a> |
                                                <a href="/paid-subscribe/">推荐机场</a> |
                                                <a href="/news/">新闻资讯</a> |
                                                <a href="/client.htm">客户端</a> |
                                                <a href="/about-us.htm">关于我们</a> |
                        <a href="/disclaimer.htm">免责申明</a> |
                        <a href="/privacy.htm">隐私申明</a> |
                        <a href="/sitemap.xml">网站地图</a>
                    </p>
                        翻墙Clash 机场订阅中文站 版权所有 Powered by WordPress
                    </p>
                </div>
            </div>
        </div>
    </footer>
    <!-- JAVASCRIPT FILES -->
    <script src="/assets/website/js/frontend/subscribeclashnode/jquery.min.js"></script>
    <script src="/assets/website/js/frontend/subscribeclashnode/bootstrap.min.js"></script>
    <script src="/assets/website/js/frontend/subscribeclashnode/jquery.sticky.js"></script>
    <script src="/assets/website/js/frontend/subscribeclashnode/jquery.magnific-popup.min.js"></script>
    <script src="/assets/website/js/frontend/subscribeclashnode/magnific-popup-options.js"></script>
    <script src="/assets/website/js/frontend/subscribeclashnode/click-scroll.js"></script>
    <script src="/assets/website/js/frontend/subscribeclashnode/custom.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>